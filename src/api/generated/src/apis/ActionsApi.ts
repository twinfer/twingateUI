/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersActionInvocationRequest,
  HandlersActionInvocationResponse,
  TypesErrorResponse,
} from '../models/index';
import {
    HandlersActionInvocationRequestFromJSON,
    HandlersActionInvocationRequestToJSON,
    HandlersActionInvocationResponseFromJSON,
    HandlersActionInvocationResponseToJSON,
    TypesErrorResponseFromJSON,
    TypesErrorResponseToJSON,
} from '../models/index';

export interface ApiThingsIdActionsNamePostRequest {
    id: string;
    name: string;
    action: HandlersActionInvocationRequest;
    timeout?: number;
}

export interface ApiThingsIdActionsNameStatusActionIdGetRequest {
    id: string;
    name: string;
    actionId: string;
}

/**
 * ActionsApi - interface
 * 
 * @export
 * @interface ActionsApiInterface
 */
export interface ActionsApiInterface {
    /**
     * Execute an action on a Thing, supporting both synchronous and asynchronous execution
     * @summary Invoke action
     * @param {string} id Thing ID
     * @param {string} name Action name
     * @param {HandlersActionInvocationRequest} action Action invocation request
     * @param {number} [timeout] Timeout in seconds (1-300)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    apiThingsIdActionsNamePostRaw(requestParameters: ApiThingsIdActionsNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersActionInvocationResponse>>;

    /**
     * Execute an action on a Thing, supporting both synchronous and asynchronous execution
     * Invoke action
     */
    apiThingsIdActionsNamePost(requestParameters: ApiThingsIdActionsNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersActionInvocationResponse>;

    /**
     * Get the current status and result of an asynchronous action execution
     * @summary Get action status
     * @param {string} id Thing ID
     * @param {string} name Action name
     * @param {string} actionId Action execution ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    apiThingsIdActionsNameStatusActionIdGetRaw(requestParameters: ApiThingsIdActionsNameStatusActionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersActionInvocationResponse>>;

    /**
     * Get the current status and result of an asynchronous action execution
     * Get action status
     */
    apiThingsIdActionsNameStatusActionIdGet(requestParameters: ApiThingsIdActionsNameStatusActionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersActionInvocationResponse>;

}

/**
 * 
 */
export class ActionsApi extends runtime.BaseAPI implements ActionsApiInterface {

    /**
     * Execute an action on a Thing, supporting both synchronous and asynchronous execution
     * Invoke action
     */
    async apiThingsIdActionsNamePostRaw(requestParameters: ApiThingsIdActionsNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersActionInvocationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiThingsIdActionsNamePost().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling apiThingsIdActionsNamePost().'
            );
        }

        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling apiThingsIdActionsNamePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timeout'] != null) {
            queryParameters['timeout'] = requestParameters['timeout'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things/{id}/actions/{name}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersActionInvocationRequestToJSON(requestParameters['action']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersActionInvocationResponseFromJSON(jsonValue));
    }

    /**
     * Execute an action on a Thing, supporting both synchronous and asynchronous execution
     * Invoke action
     */
    async apiThingsIdActionsNamePost(requestParameters: ApiThingsIdActionsNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersActionInvocationResponse> {
        const response = await this.apiThingsIdActionsNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current status and result of an asynchronous action execution
     * Get action status
     */
    async apiThingsIdActionsNameStatusActionIdGetRaw(requestParameters: ApiThingsIdActionsNameStatusActionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersActionInvocationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiThingsIdActionsNameStatusActionIdGet().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling apiThingsIdActionsNameStatusActionIdGet().'
            );
        }

        if (requestParameters['actionId'] == null) {
            throw new runtime.RequiredError(
                'actionId',
                'Required parameter "actionId" was null or undefined when calling apiThingsIdActionsNameStatusActionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things/{id}/actions/{name}/status/{actionId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"actionId"}}`, encodeURIComponent(String(requestParameters['actionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersActionInvocationResponseFromJSON(jsonValue));
    }

    /**
     * Get the current status and result of an asynchronous action execution
     * Get action status
     */
    async apiThingsIdActionsNameStatusActionIdGet(requestParameters: ApiThingsIdActionsNameStatusActionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersActionInvocationResponse> {
        const response = await this.apiThingsIdActionsNameStatusActionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
