/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersPropertyWriteRequest,
  HandlersPropertyWriteResponse,
  TypesErrorResponse,
} from '../models/index';
import {
    HandlersPropertyWriteRequestFromJSON,
    HandlersPropertyWriteRequestToJSON,
    HandlersPropertyWriteResponseFromJSON,
    HandlersPropertyWriteResponseToJSON,
    TypesErrorResponseFromJSON,
    TypesErrorResponseToJSON,
} from '../models/index';

export interface ApiThingsIdPropertiesNameGetRequest {
    id: string;
    name: string;
}

export interface ApiThingsIdPropertiesNamePutRequest {
    id: string;
    name: string;
    property: HandlersPropertyWriteRequest;
}

/**
 * PropertiesApi - interface
 * 
 * @export
 * @interface PropertiesApiInterface
 */
export interface PropertiesApiInterface {
    /**
     * Subscribe to real-time property value changes via Server-Sent Events
     * @summary Observe property changes
     * @param {string} id Thing ID
     * @param {string} name Property name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    apiThingsIdPropertiesNameGetRaw(requestParameters: ApiThingsIdPropertiesNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Subscribe to real-time property value changes via Server-Sent Events
     * Observe property changes
     */
    apiThingsIdPropertiesNameGet(requestParameters: ApiThingsIdPropertiesNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Update the value of a specific property on a Thing
     * @summary Write property value
     * @param {string} id Thing ID
     * @param {string} name Property name
     * @param {HandlersPropertyWriteRequest} property Property value to set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    apiThingsIdPropertiesNamePutRaw(requestParameters: ApiThingsIdPropertiesNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersPropertyWriteResponse>>;

    /**
     * Update the value of a specific property on a Thing
     * Write property value
     */
    apiThingsIdPropertiesNamePut(requestParameters: ApiThingsIdPropertiesNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersPropertyWriteResponse>;

}

/**
 * 
 */
export class PropertiesApi extends runtime.BaseAPI implements PropertiesApiInterface {

    /**
     * Subscribe to real-time property value changes via Server-Sent Events
     * Observe property changes
     */
    async apiThingsIdPropertiesNameGetRaw(requestParameters: ApiThingsIdPropertiesNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiThingsIdPropertiesNameGet().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling apiThingsIdPropertiesNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things/{id}/properties/{name}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Subscribe to real-time property value changes via Server-Sent Events
     * Observe property changes
     */
    async apiThingsIdPropertiesNameGet(requestParameters: ApiThingsIdPropertiesNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiThingsIdPropertiesNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the value of a specific property on a Thing
     * Write property value
     */
    async apiThingsIdPropertiesNamePutRaw(requestParameters: ApiThingsIdPropertiesNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersPropertyWriteResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiThingsIdPropertiesNamePut().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling apiThingsIdPropertiesNamePut().'
            );
        }

        if (requestParameters['property'] == null) {
            throw new runtime.RequiredError(
                'property',
                'Required parameter "property" was null or undefined when calling apiThingsIdPropertiesNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things/{id}/properties/{name}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersPropertyWriteRequestToJSON(requestParameters['property']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersPropertyWriteResponseFromJSON(jsonValue));
    }

    /**
     * Update the value of a specific property on a Thing
     * Write property value
     */
    async apiThingsIdPropertiesNamePut(requestParameters: ApiThingsIdPropertiesNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersPropertyWriteResponse> {
        const response = await this.apiThingsIdPropertiesNamePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
