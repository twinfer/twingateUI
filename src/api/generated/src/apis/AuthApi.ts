/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesAuthStatusResponse,
  TypesErrorResponse,
  TypesUserResponse,
} from '../models/index';
import {
    TypesAuthStatusResponseFromJSON,
    TypesAuthStatusResponseToJSON,
    TypesErrorResponseFromJSON,
    TypesErrorResponseToJSON,
    TypesUserResponseFromJSON,
    TypesUserResponseToJSON,
} from '../models/index';

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * Get current authenticated user\'s profile information
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authProfileGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserResponse>>;

    /**
     * Get current authenticated user\'s profile information
     * Get user profile
     */
    authProfileGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserResponse>;

    /**
     * Get current authentication status and user information
     * @summary Get authentication status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthStatusResponse>>;

    /**
     * Get current authentication status and user information
     * Get authentication status
     */
    authStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthStatusResponse>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Get current authenticated user\'s profile information
     * Get user profile
     */
    async authProfileGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/auth/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesUserResponseFromJSON(jsonValue));
    }

    /**
     * Get current authenticated user\'s profile information
     * Get user profile
     */
    async authProfileGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserResponse> {
        const response = await this.authProfileGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current authentication status and user information
     * Get authentication status
     */
    async authStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/auth/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthStatusResponseFromJSON(jsonValue));
    }

    /**
     * Get current authentication status and user information
     * Get authentication status
     */
    async authStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthStatusResponse> {
        const response = await this.authStatusGetRaw(initOverrides);
        return await response.value();
    }

}
