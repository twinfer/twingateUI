/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesErrorResponse,
} from '../models/index';
import {
    TypesErrorResponseFromJSON,
    TypesErrorResponseToJSON,
} from '../models/index';

export interface ApiThingsIdEventsNameGetRequest {
    id: string;
    name: string;
    filter?: string;
    batchSize?: number;
    timeout?: number;
    lastEventId?: string;
}

/**
 * EventsApi - interface
 * 
 * @export
 * @interface EventsApiInterface
 */
export interface EventsApiInterface {
    /**
     * Subscribe to real-time events from a Thing via Server-Sent Events
     * @summary Subscribe to events
     * @param {string} id Thing ID
     * @param {string} name Event name
     * @param {string} [filter] Event filter criteria
     * @param {number} [batchSize] Number of events to batch (1-100)
     * @param {number} [timeout] Subscription timeout in seconds (1-3600)
     * @param {string} [lastEventId] Last event ID for resuming subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    apiThingsIdEventsNameGetRaw(requestParameters: ApiThingsIdEventsNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Subscribe to real-time events from a Thing via Server-Sent Events
     * Subscribe to events
     */
    apiThingsIdEventsNameGet(requestParameters: ApiThingsIdEventsNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI implements EventsApiInterface {

    /**
     * Subscribe to real-time events from a Thing via Server-Sent Events
     * Subscribe to events
     */
    async apiThingsIdEventsNameGetRaw(requestParameters: ApiThingsIdEventsNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiThingsIdEventsNameGet().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling apiThingsIdEventsNameGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['batchSize'] != null) {
            queryParameters['batch_size'] = requestParameters['batchSize'];
        }

        if (requestParameters['timeout'] != null) {
            queryParameters['timeout'] = requestParameters['timeout'];
        }

        if (requestParameters['lastEventId'] != null) {
            queryParameters['last_event_id'] = requestParameters['lastEventId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things/{id}/events/{name}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Subscribe to real-time events from a Thing via Server-Sent Events
     * Subscribe to events
     */
    async apiThingsIdEventsNameGet(requestParameters: ApiThingsIdEventsNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiThingsIdEventsNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
