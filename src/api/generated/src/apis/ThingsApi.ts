/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersThingDeleteResponse,
  HandlersThingListResponse,
  HandlersThingRegistrationRequest,
  HandlersThingRegistrationResponse,
  HandlersThingUpdateResponse,
  TypesErrorResponse,
  WotThingDescription,
} from '../models/index';
import {
    HandlersThingDeleteResponseFromJSON,
    HandlersThingDeleteResponseToJSON,
    HandlersThingListResponseFromJSON,
    HandlersThingListResponseToJSON,
    HandlersThingRegistrationRequestFromJSON,
    HandlersThingRegistrationRequestToJSON,
    HandlersThingRegistrationResponseFromJSON,
    HandlersThingRegistrationResponseToJSON,
    HandlersThingUpdateResponseFromJSON,
    HandlersThingUpdateResponseToJSON,
    TypesErrorResponseFromJSON,
    TypesErrorResponseToJSON,
    WotThingDescriptionFromJSON,
    WotThingDescriptionToJSON,
} from '../models/index';

export interface ApiThingsGetRequest {
    limit?: number;
    offset?: number;
    filter?: string;
}

export interface ApiThingsIdDeleteRequest {
    id: string;
}

export interface ApiThingsIdGetRequest {
    id: string;
    includeStreams?: boolean;
    original?: boolean;
}

export interface ApiThingsIdPutRequest {
    id: string;
    thing: HandlersThingRegistrationRequest;
}

export interface ApiThingsPostRequest {
    thing: HandlersThingRegistrationRequest;
}

/**
 * ThingsApi - interface
 * 
 * @export
 * @interface ThingsApiInterface
 */
export interface ThingsApiInterface {
    /**
     * Retrieve all registered Thing Descriptions with optional filtering and pagination
     * @summary List all Thing Descriptions
     * @param {number} [limit] Maximum number of results (1-1000)
     * @param {number} [offset] Number of results to skip
     * @param {string} [filter] Filter by Thing ID, title, or description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApiInterface
     */
    apiThingsGetRaw(requestParameters: ApiThingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersThingListResponse>>;

    /**
     * Retrieve all registered Thing Descriptions with optional filtering and pagination
     * List all Thing Descriptions
     */
    apiThingsGet(requestParameters: ApiThingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersThingListResponse>;

    /**
     * Remove a Thing Description and clean up associated streams and bindings
     * @summary Delete a Thing Description
     * @param {string} id Thing ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApiInterface
     */
    apiThingsIdDeleteRaw(requestParameters: ApiThingsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersThingDeleteResponse>>;

    /**
     * Remove a Thing Description and clean up associated streams and bindings
     * Delete a Thing Description
     */
    apiThingsIdDelete(requestParameters: ApiThingsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersThingDeleteResponse>;

    /**
     * Retrieve a specific Thing Description by ID
     * @summary Get a Thing Description
     * @param {string} id Thing ID
     * @param {boolean} [includeStreams] Include stream information in response
     * @param {boolean} [original] Return original Thing Description without gateway transformation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApiInterface
     */
    apiThingsIdGetRaw(requestParameters: ApiThingsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WotThingDescription>>;

    /**
     * Retrieve a specific Thing Description by ID
     * Get a Thing Description
     */
    apiThingsIdGet(requestParameters: ApiThingsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WotThingDescription>;

    /**
     * Update an existing Thing Description and regenerate streams and bindings
     * @summary Update a Thing Description
     * @param {string} id Thing ID
     * @param {HandlersThingRegistrationRequest} thing Thing update request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApiInterface
     */
    apiThingsIdPutRaw(requestParameters: ApiThingsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersThingUpdateResponse>>;

    /**
     * Update an existing Thing Description and regenerate streams and bindings
     * Update a Thing Description
     */
    apiThingsIdPut(requestParameters: ApiThingsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersThingUpdateResponse>;

    /**
     * Register a new Thing Description and create associated streams and bindings
     * @summary Register a new Thing Description
     * @param {HandlersThingRegistrationRequest} thing Thing registration request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApiInterface
     */
    apiThingsPostRaw(requestParameters: ApiThingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersThingRegistrationResponse>>;

    /**
     * Register a new Thing Description and create associated streams and bindings
     * Register a new Thing Description
     */
    apiThingsPost(requestParameters: ApiThingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersThingRegistrationResponse>;

}

/**
 * 
 */
export class ThingsApi extends runtime.BaseAPI implements ThingsApiInterface {

    /**
     * Retrieve all registered Thing Descriptions with optional filtering and pagination
     * List all Thing Descriptions
     */
    async apiThingsGetRaw(requestParameters: ApiThingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersThingListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersThingListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all registered Thing Descriptions with optional filtering and pagination
     * List all Thing Descriptions
     */
    async apiThingsGet(requestParameters: ApiThingsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersThingListResponse> {
        const response = await this.apiThingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a Thing Description and clean up associated streams and bindings
     * Delete a Thing Description
     */
    async apiThingsIdDeleteRaw(requestParameters: ApiThingsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersThingDeleteResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiThingsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersThingDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Remove a Thing Description and clean up associated streams and bindings
     * Delete a Thing Description
     */
    async apiThingsIdDelete(requestParameters: ApiThingsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersThingDeleteResponse> {
        const response = await this.apiThingsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific Thing Description by ID
     * Get a Thing Description
     */
    async apiThingsIdGetRaw(requestParameters: ApiThingsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WotThingDescription>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiThingsIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeStreams'] != null) {
            queryParameters['include_streams'] = requestParameters['includeStreams'];
        }

        if (requestParameters['original'] != null) {
            queryParameters['original'] = requestParameters['original'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WotThingDescriptionFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific Thing Description by ID
     * Get a Thing Description
     */
    async apiThingsIdGet(requestParameters: ApiThingsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WotThingDescription> {
        const response = await this.apiThingsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Thing Description and regenerate streams and bindings
     * Update a Thing Description
     */
    async apiThingsIdPutRaw(requestParameters: ApiThingsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersThingUpdateResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiThingsIdPut().'
            );
        }

        if (requestParameters['thing'] == null) {
            throw new runtime.RequiredError(
                'thing',
                'Required parameter "thing" was null or undefined when calling apiThingsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersThingRegistrationRequestToJSON(requestParameters['thing']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersThingUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing Thing Description and regenerate streams and bindings
     * Update a Thing Description
     */
    async apiThingsIdPut(requestParameters: ApiThingsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersThingUpdateResponse> {
        const response = await this.apiThingsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new Thing Description and create associated streams and bindings
     * Register a new Thing Description
     */
    async apiThingsPostRaw(requestParameters: ApiThingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersThingRegistrationResponse>> {
        if (requestParameters['thing'] == null) {
            throw new runtime.RequiredError(
                'thing',
                'Required parameter "thing" was null or undefined when calling apiThingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/things`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersThingRegistrationRequestToJSON(requestParameters['thing']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersThingRegistrationResponseFromJSON(jsonValue));
    }

    /**
     * Register a new Thing Description and create associated streams and bindings
     * Register a new Thing Description
     */
    async apiThingsPost(requestParameters: ApiThingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersThingRegistrationResponse> {
        const response = await this.apiThingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
