/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesAuthProviderListResponse,
  TypesAuthProviderResponse,
  TypesAuthProviderTestResult,
  TypesCreateAuthProviderRequest,
  TypesErrorResponse,
  TypesProviderUserListResponse,
  TypesUpdateAuthProviderRequest,
} from '../models/index';
import {
    TypesAuthProviderListResponseFromJSON,
    TypesAuthProviderListResponseToJSON,
    TypesAuthProviderResponseFromJSON,
    TypesAuthProviderResponseToJSON,
    TypesAuthProviderTestResultFromJSON,
    TypesAuthProviderTestResultToJSON,
    TypesCreateAuthProviderRequestFromJSON,
    TypesCreateAuthProviderRequestToJSON,
    TypesErrorResponseFromJSON,
    TypesErrorResponseToJSON,
    TypesProviderUserListResponseFromJSON,
    TypesProviderUserListResponseToJSON,
    TypesUpdateAuthProviderRequestFromJSON,
    TypesUpdateAuthProviderRequestToJSON,
} from '../models/index';

export interface AdminAuthProvidersIdDeleteRequest {
    id: string;
}

export interface AdminAuthProvidersIdGetRequest {
    id: string;
}

export interface AdminAuthProvidersIdPutRequest {
    id: string;
    provider: TypesUpdateAuthProviderRequest;
}

export interface AdminAuthProvidersIdTestPostRequest {
    id: string;
}

export interface AdminAuthProvidersIdUsersGetRequest {
    id: string;
    search?: string;
    limit?: number;
}

export interface AdminAuthProvidersPostRequest {
    provider: TypesCreateAuthProviderRequest;
}

/**
 * AuthProvidersApi - interface
 * 
 * @export
 * @interface AuthProvidersApiInterface
 */
export interface AuthProvidersApiInterface {
    /**
     * Retrieve all configured authentication providers
     * @summary List all authentication providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProvidersApiInterface
     */
    adminAuthProvidersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderListResponse>>;

    /**
     * Retrieve all configured authentication providers
     * List all authentication providers
     */
    adminAuthProvidersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderListResponse>;

    /**
     * Delete an authentication provider configuration
     * @summary Delete authentication provider
     * @param {string} id Provider ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProvidersApiInterface
     */
    adminAuthProvidersIdDeleteRaw(requestParameters: AdminAuthProvidersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an authentication provider configuration
     * Delete authentication provider
     */
    adminAuthProvidersIdDelete(requestParameters: AdminAuthProvidersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve a specific authentication provider by ID
     * @summary Get authentication provider
     * @param {string} id Provider ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProvidersApiInterface
     */
    adminAuthProvidersIdGetRaw(requestParameters: AdminAuthProvidersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderResponse>>;

    /**
     * Retrieve a specific authentication provider by ID
     * Get authentication provider
     */
    adminAuthProvidersIdGet(requestParameters: AdminAuthProvidersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderResponse>;

    /**
     * Update an existing authentication provider configuration
     * @summary Update authentication provider
     * @param {string} id Provider ID
     * @param {TypesUpdateAuthProviderRequest} provider Updated provider configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProvidersApiInterface
     */
    adminAuthProvidersIdPutRaw(requestParameters: AdminAuthProvidersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderResponse>>;

    /**
     * Update an existing authentication provider configuration
     * Update authentication provider
     */
    adminAuthProvidersIdPut(requestParameters: AdminAuthProvidersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderResponse>;

    /**
     * Test connection and configuration for an authentication provider
     * @summary Test authentication provider
     * @param {string} id Provider ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProvidersApiInterface
     */
    adminAuthProvidersIdTestPostRaw(requestParameters: AdminAuthProvidersIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderTestResult>>;

    /**
     * Test connection and configuration for an authentication provider
     * Test authentication provider
     */
    adminAuthProvidersIdTestPost(requestParameters: AdminAuthProvidersIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderTestResult>;

    /**
     * Retrieve users from an external authentication provider (if supported)
     * @summary List users from authentication provider
     * @param {string} id Provider ID
     * @param {string} [search] Search query
     * @param {number} [limit] Maximum number of users to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProvidersApiInterface
     */
    adminAuthProvidersIdUsersGetRaw(requestParameters: AdminAuthProvidersIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesProviderUserListResponse>>;

    /**
     * Retrieve users from an external authentication provider (if supported)
     * List users from authentication provider
     */
    adminAuthProvidersIdUsersGet(requestParameters: AdminAuthProvidersIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesProviderUserListResponse>;

    /**
     * Create a new authentication provider configuration
     * @summary Create authentication provider
     * @param {TypesCreateAuthProviderRequest} provider Provider configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProvidersApiInterface
     */
    adminAuthProvidersPostRaw(requestParameters: AdminAuthProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderResponse>>;

    /**
     * Create a new authentication provider configuration
     * Create authentication provider
     */
    adminAuthProvidersPost(requestParameters: AdminAuthProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderResponse>;

}

/**
 * 
 */
export class AuthProvidersApi extends runtime.BaseAPI implements AuthProvidersApiInterface {

    /**
     * Retrieve all configured authentication providers
     * List all authentication providers
     */
    async adminAuthProvidersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/admin/auth/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthProviderListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all configured authentication providers
     * List all authentication providers
     */
    async adminAuthProvidersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderListResponse> {
        const response = await this.adminAuthProvidersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete an authentication provider configuration
     * Delete authentication provider
     */
    async adminAuthProvidersIdDeleteRaw(requestParameters: AdminAuthProvidersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminAuthProvidersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/admin/auth/providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an authentication provider configuration
     * Delete authentication provider
     */
    async adminAuthProvidersIdDelete(requestParameters: AdminAuthProvidersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminAuthProvidersIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a specific authentication provider by ID
     * Get authentication provider
     */
    async adminAuthProvidersIdGetRaw(requestParameters: AdminAuthProvidersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminAuthProvidersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/admin/auth/providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthProviderResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific authentication provider by ID
     * Get authentication provider
     */
    async adminAuthProvidersIdGet(requestParameters: AdminAuthProvidersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderResponse> {
        const response = await this.adminAuthProvidersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing authentication provider configuration
     * Update authentication provider
     */
    async adminAuthProvidersIdPutRaw(requestParameters: AdminAuthProvidersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminAuthProvidersIdPut().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling adminAuthProvidersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/admin/auth/providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateAuthProviderRequestToJSON(requestParameters['provider']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthProviderResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing authentication provider configuration
     * Update authentication provider
     */
    async adminAuthProvidersIdPut(requestParameters: AdminAuthProvidersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderResponse> {
        const response = await this.adminAuthProvidersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test connection and configuration for an authentication provider
     * Test authentication provider
     */
    async adminAuthProvidersIdTestPostRaw(requestParameters: AdminAuthProvidersIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderTestResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminAuthProvidersIdTestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/admin/auth/providers/{id}/test`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthProviderTestResultFromJSON(jsonValue));
    }

    /**
     * Test connection and configuration for an authentication provider
     * Test authentication provider
     */
    async adminAuthProvidersIdTestPost(requestParameters: AdminAuthProvidersIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderTestResult> {
        const response = await this.adminAuthProvidersIdTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve users from an external authentication provider (if supported)
     * List users from authentication provider
     */
    async adminAuthProvidersIdUsersGetRaw(requestParameters: AdminAuthProvidersIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesProviderUserListResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminAuthProvidersIdUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/admin/auth/providers/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesProviderUserListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve users from an external authentication provider (if supported)
     * List users from authentication provider
     */
    async adminAuthProvidersIdUsersGet(requestParameters: AdminAuthProvidersIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesProviderUserListResponse> {
        const response = await this.adminAuthProvidersIdUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new authentication provider configuration
     * Create authentication provider
     */
    async adminAuthProvidersPostRaw(requestParameters: AdminAuthProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesAuthProviderResponse>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling adminAuthProvidersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/admin/auth/providers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateAuthProviderRequestToJSON(requestParameters['provider']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesAuthProviderResponseFromJSON(jsonValue));
    }

    /**
     * Create a new authentication provider configuration
     * Create authentication provider
     */
    async adminAuthProvidersPost(requestParameters: AdminAuthProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesAuthProviderResponse> {
        const response = await this.adminAuthProvidersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
