/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersConfigDiffResponse,
  HandlersConfigHistoryResponse,
  HandlersConfigResponse,
  TypesErrorResponse,
} from '../models/index';
import {
    HandlersConfigDiffResponseFromJSON,
    HandlersConfigDiffResponseToJSON,
    HandlersConfigHistoryResponseFromJSON,
    HandlersConfigHistoryResponseToJSON,
    HandlersConfigResponseFromJSON,
    HandlersConfigResponseToJSON,
    TypesErrorResponseFromJSON,
    TypesErrorResponseToJSON,
} from '../models/index';

export interface ApiConfigCaddySettingsPutRequest {
    settings: { [key: string]: any; };
}

export interface ApiConfigDiffGetRequest {
    from: string;
    to?: string;
}

export interface ApiConfigHistoryGetRequest {
    limit?: number;
}

export interface ApiConfigPatchPostRequest {
    patch: object;
}

export interface ApiConfigPutRequest {
    config: { [key: string]: any; };
}

export interface ApiConfigRollbackVersionPostRequest {
    version: string;
}

/**
 * ConfigurationApi - interface
 * 
 * @export
 * @interface ConfigurationApiInterface
 */
export interface ConfigurationApiInterface {
    /**
     * Retrieve the current generated Caddy configuration
     * @summary Get Caddy configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigCaddyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>>;

    /**
     * Retrieve the current generated Caddy configuration
     * Get Caddy configuration
     */
    apiConfigCaddyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse>;

    /**
     * Retrieve only the Caddy-specific configuration settings
     * @summary Get Caddy settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigCaddySettingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>>;

    /**
     * Retrieve only the Caddy-specific configuration settings
     * Get Caddy settings
     */
    apiConfigCaddySettingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse>;

    /**
     * Update only the Caddy-specific configuration settings
     * @summary Update Caddy settings
     * @param {{ [key: string]: any; }} settings Caddy settings to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigCaddySettingsPutRaw(requestParameters: ApiConfigCaddySettingsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>>;

    /**
     * Update only the Caddy-specific configuration settings
     * Update Caddy settings
     */
    apiConfigCaddySettingsPut(requestParameters: ApiConfigCaddySettingsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse>;

    /**
     * Get the differences between two configuration versions
     * @summary Get configuration diff
     * @param {string} from Source version number
     * @param {string} [to] Target version number (current if not specified)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigDiffGetRaw(requestParameters: ApiConfigDiffGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigDiffResponse>>;

    /**
     * Get the differences between two configuration versions
     * Get configuration diff
     */
    apiConfigDiffGet(requestParameters: ApiConfigDiffGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigDiffResponse>;

    /**
     * Retrieve the current merged configuration from all sources
     * @summary Get current configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>>;

    /**
     * Retrieve the current merged configuration from all sources
     * Get current configuration
     */
    apiConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse>;

    /**
     * Retrieve the history of configuration changes with diffs
     * @summary Get configuration history
     * @param {number} [limit] Maximum number of history entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigHistoryGetRaw(requestParameters: ApiConfigHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigHistoryResponse>>;

    /**
     * Retrieve the history of configuration changes with diffs
     * Get configuration history
     */
    apiConfigHistoryGet(requestParameters: ApiConfigHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigHistoryResponse>;

    /**
     * Apply a JSON diff patch to update configuration
     * @summary Apply configuration patch
     * @param {object} patch JSON patch data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigPatchPostRaw(requestParameters: ApiConfigPatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>>;

    /**
     * Apply a JSON diff patch to update configuration
     * Apply configuration patch
     */
    apiConfigPatchPost(requestParameters: ApiConfigPatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse>;

    /**
     * Update the application configuration with new values
     * @summary Update configuration
     * @param {{ [key: string]: any; }} config Configuration updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigPutRaw(requestParameters: ApiConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>>;

    /**
     * Update the application configuration with new values
     * Update configuration
     */
    apiConfigPut(requestParameters: ApiConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse>;

    /**
     * Reload configuration from persistent storage
     * @summary Reload configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigReloadPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>>;

    /**
     * Reload configuration from persistent storage
     * Reload configuration
     */
    apiConfigReloadPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse>;

    /**
     * Rollback configuration to a previous version
     * @summary Rollback configuration
     * @param {string} version Configuration version to rollback to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    apiConfigRollbackVersionPostRaw(requestParameters: ApiConfigRollbackVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>>;

    /**
     * Rollback configuration to a previous version
     * Rollback configuration
     */
    apiConfigRollbackVersionPost(requestParameters: ApiConfigRollbackVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse>;

}

/**
 * 
 */
export class ConfigurationApi extends runtime.BaseAPI implements ConfigurationApiInterface {

    /**
     * Retrieve the current generated Caddy configuration
     * Get Caddy configuration
     */
    async apiConfigCaddyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config/caddy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the current generated Caddy configuration
     * Get Caddy configuration
     */
    async apiConfigCaddyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse> {
        const response = await this.apiConfigCaddyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve only the Caddy-specific configuration settings
     * Get Caddy settings
     */
    async apiConfigCaddySettingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config/caddy/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve only the Caddy-specific configuration settings
     * Get Caddy settings
     */
    async apiConfigCaddySettingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse> {
        const response = await this.apiConfigCaddySettingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update only the Caddy-specific configuration settings
     * Update Caddy settings
     */
    async apiConfigCaddySettingsPutRaw(requestParameters: ApiConfigCaddySettingsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>> {
        if (requestParameters['settings'] == null) {
            throw new runtime.RequiredError(
                'settings',
                'Required parameter "settings" was null or undefined when calling apiConfigCaddySettingsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config/caddy/settings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['settings'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update only the Caddy-specific configuration settings
     * Update Caddy settings
     */
    async apiConfigCaddySettingsPut(requestParameters: ApiConfigCaddySettingsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse> {
        const response = await this.apiConfigCaddySettingsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the differences between two configuration versions
     * Get configuration diff
     */
    async apiConfigDiffGetRaw(requestParameters: ApiConfigDiffGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigDiffResponse>> {
        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling apiConfigDiffGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config/diff`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigDiffResponseFromJSON(jsonValue));
    }

    /**
     * Get the differences between two configuration versions
     * Get configuration diff
     */
    async apiConfigDiffGet(requestParameters: ApiConfigDiffGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigDiffResponse> {
        const response = await this.apiConfigDiffGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the current merged configuration from all sources
     * Get current configuration
     */
    async apiConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the current merged configuration from all sources
     * Get current configuration
     */
    async apiConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse> {
        const response = await this.apiConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the history of configuration changes with diffs
     * Get configuration history
     */
    async apiConfigHistoryGetRaw(requestParameters: ApiConfigHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigHistoryResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigHistoryResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the history of configuration changes with diffs
     * Get configuration history
     */
    async apiConfigHistoryGet(requestParameters: ApiConfigHistoryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigHistoryResponse> {
        const response = await this.apiConfigHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a JSON diff patch to update configuration
     * Apply configuration patch
     */
    async apiConfigPatchPostRaw(requestParameters: ApiConfigPatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>> {
        if (requestParameters['patch'] == null) {
            throw new runtime.RequiredError(
                'patch',
                'Required parameter "patch" was null or undefined when calling apiConfigPatchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config/patch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['patch'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigResponseFromJSON(jsonValue));
    }

    /**
     * Apply a JSON diff patch to update configuration
     * Apply configuration patch
     */
    async apiConfigPatchPost(requestParameters: ApiConfigPatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse> {
        const response = await this.apiConfigPatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the application configuration with new values
     * Update configuration
     */
    async apiConfigPutRaw(requestParameters: ApiConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>> {
        if (requestParameters['config'] == null) {
            throw new runtime.RequiredError(
                'config',
                'Required parameter "config" was null or undefined when calling apiConfigPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['config'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update the application configuration with new values
     * Update configuration
     */
    async apiConfigPut(requestParameters: ApiConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse> {
        const response = await this.apiConfigPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reload configuration from persistent storage
     * Reload configuration
     */
    async apiConfigReloadPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config/reload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigResponseFromJSON(jsonValue));
    }

    /**
     * Reload configuration from persistent storage
     * Reload configuration
     */
    async apiConfigReloadPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse> {
        const response = await this.apiConfigReloadPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Rollback configuration to a previous version
     * Rollback configuration
     */
    async apiConfigRollbackVersionPostRaw(requestParameters: ApiConfigRollbackVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConfigResponse>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling apiConfigRollbackVersionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/config/rollback/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConfigResponseFromJSON(jsonValue));
    }

    /**
     * Rollback configuration to a previous version
     * Rollback configuration
     */
    async apiConfigRollbackVersionPost(requestParameters: ApiConfigRollbackVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConfigResponse> {
        const response = await this.apiConfigRollbackVersionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
