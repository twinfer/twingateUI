/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DiscoveryCapabilityQuery,
  DiscoverySearchQuery,
  DiscoverySearchResult,
  DiscoveryThingHierarchy,
  TypesErrorResponse,
  WotThingDescription,
} from '../models/index';
import {
    DiscoveryCapabilityQueryFromJSON,
    DiscoveryCapabilityQueryToJSON,
    DiscoverySearchQueryFromJSON,
    DiscoverySearchQueryToJSON,
    DiscoverySearchResultFromJSON,
    DiscoverySearchResultToJSON,
    DiscoveryThingHierarchyFromJSON,
    DiscoveryThingHierarchyToJSON,
    TypesErrorResponseFromJSON,
    TypesErrorResponseToJSON,
    WotThingDescriptionFromJSON,
    WotThingDescriptionToJSON,
} from '../models/index';

export interface ApiDirectoryDiscoverCompatibleThingIdGetRequest {
    thingId: string;
}

export interface ApiDirectoryDiscoverHierarchyThingIdGetRequest {
    thingId: string;
    maxDepth?: number;
}

export interface ApiDirectoryDiscoverProtocolProtocolGetRequest {
    protocol: string;
}

export interface ApiDirectoryRelationshipsParentIdChildIdDeleteRequest {
    parentId: string;
    childId: string;
}

export interface ApiDirectoryRelationshipsPostRequest {
    relationship: { [key: string]: any; };
}

export interface ApiDirectorySearchCapabilitiesPostRequest {
    query: DiscoveryCapabilityQuery;
}

export interface ApiDirectorySearchPostRequest {
    query: DiscoverySearchQuery;
}

export interface ApiDirectorySearchSemanticGetRequest {
    type: string;
}

export interface ApiDirectorySearchTextGetRequest {
    q: string;
    limit?: number;
}

/**
 * DirectoryApi - interface
 * 
 * @export
 * @interface DirectoryApiInterface
 */
export interface DirectoryApiInterface {
    /**
     * Find Things that can work together with the specified Thing
     * @summary Discover compatible Things
     * @param {string} thingId Thing ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApiInterface
     */
    apiDirectoryDiscoverCompatibleThingIdGetRaw(requestParameters: ApiDirectoryDiscoverCompatibleThingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WotThingDescription>>>;

    /**
     * Find Things that can work together with the specified Thing
     * Discover compatible Things
     */
    apiDirectoryDiscoverCompatibleThingIdGet(requestParameters: ApiDirectoryDiscoverCompatibleThingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WotThingDescription>>;

    /**
     * Get hierarchical relationships starting from a root Thing
     * @summary Get Thing hierarchy
     * @param {string} thingId Root Thing ID
     * @param {number} [maxDepth] Maximum depth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApiInterface
     */
    apiDirectoryDiscoverHierarchyThingIdGetRaw(requestParameters: ApiDirectoryDiscoverHierarchyThingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoveryThingHierarchy>>;

    /**
     * Get hierarchical relationships starting from a root Thing
     * Get Thing hierarchy
     */
    apiDirectoryDiscoverHierarchyThingIdGet(requestParameters: ApiDirectoryDiscoverHierarchyThingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoveryThingHierarchy>;

    /**
     * Find all Things that support a specific protocol
     * @summary Discover Things by protocol
     * @param {string} protocol Protocol name (http, mqtt, coap, etc.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApiInterface
     */
    apiDirectoryDiscoverProtocolProtocolGetRaw(requestParameters: ApiDirectoryDiscoverProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WotThingDescription>>>;

    /**
     * Find all Things that support a specific protocol
     * Discover Things by protocol
     */
    apiDirectoryDiscoverProtocolProtocolGet(requestParameters: ApiDirectoryDiscoverProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WotThingDescription>>;

    /**
     * Remove the relationship between two Things
     * @summary Remove Thing relationship
     * @param {string} parentId Parent Thing ID
     * @param {string} childId Child Thing ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApiInterface
     */
    apiDirectoryRelationshipsParentIdChildIdDeleteRaw(requestParameters: ApiDirectoryRelationshipsParentIdChildIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove the relationship between two Things
     * Remove Thing relationship
     */
    apiDirectoryRelationshipsParentIdChildIdDelete(requestParameters: ApiDirectoryRelationshipsParentIdChildIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Create a relationship between two Things
     * @summary Add Thing relationship
     * @param {{ [key: string]: any; }} relationship Relationship data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApiInterface
     */
    apiDirectoryRelationshipsPostRaw(requestParameters: ApiDirectoryRelationshipsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a relationship between two Things
     * Add Thing relationship
     */
    apiDirectoryRelationshipsPost(requestParameters: ApiDirectoryRelationshipsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Find Things matching specific capability requirements
     * @summary Search Things by capabilities
     * @param {DiscoveryCapabilityQuery} query Capability requirements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApiInterface
     */
    apiDirectorySearchCapabilitiesPostRaw(requestParameters: ApiDirectorySearchCapabilitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WotThingDescription>>>;

    /**
     * Find Things matching specific capability requirements
     * Search Things by capabilities
     */
    apiDirectorySearchCapabilitiesPost(requestParameters: ApiDirectorySearchCapabilitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WotThingDescription>>;

    /**
     * Search for Things using various filters and criteria
     * @summary Search for Things
     * @param {DiscoverySearchQuery} query Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApiInterface
     */
    apiDirectorySearchPostRaw(requestParameters: ApiDirectorySearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DiscoverySearchResult>>>;

    /**
     * Search for Things using various filters and criteria
     * Search for Things
     */
    apiDirectorySearchPost(requestParameters: ApiDirectorySearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DiscoverySearchResult>>;

    /**
     * Find Things with specific semantic annotations
     * @summary Search Things by semantic type
     * @param {string} type Semantic type (e.g., \&#39;TemperatureSensor\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApiInterface
     */
    apiDirectorySearchSemanticGetRaw(requestParameters: ApiDirectorySearchSemanticGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WotThingDescription>>>;

    /**
     * Find Things with specific semantic annotations
     * Search Things by semantic type
     */
    apiDirectorySearchSemanticGet(requestParameters: ApiDirectorySearchSemanticGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WotThingDescription>>;

    /**
     * Full-text search across Thing Descriptions
     * @summary Search Things by text
     * @param {string} q Search text
     * @param {number} [limit] Result limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApiInterface
     */
    apiDirectorySearchTextGetRaw(requestParameters: ApiDirectorySearchTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DiscoverySearchResult>>>;

    /**
     * Full-text search across Thing Descriptions
     * Search Things by text
     */
    apiDirectorySearchTextGet(requestParameters: ApiDirectorySearchTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DiscoverySearchResult>>;

}

/**
 * 
 */
export class DirectoryApi extends runtime.BaseAPI implements DirectoryApiInterface {

    /**
     * Find Things that can work together with the specified Thing
     * Discover compatible Things
     */
    async apiDirectoryDiscoverCompatibleThingIdGetRaw(requestParameters: ApiDirectoryDiscoverCompatibleThingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WotThingDescription>>> {
        if (requestParameters['thingId'] == null) {
            throw new runtime.RequiredError(
                'thingId',
                'Required parameter "thingId" was null or undefined when calling apiDirectoryDiscoverCompatibleThingIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/directory/discover/compatible/{thingId}`.replace(`{${"thingId"}}`, encodeURIComponent(String(requestParameters['thingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WotThingDescriptionFromJSON));
    }

    /**
     * Find Things that can work together with the specified Thing
     * Discover compatible Things
     */
    async apiDirectoryDiscoverCompatibleThingIdGet(requestParameters: ApiDirectoryDiscoverCompatibleThingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WotThingDescription>> {
        const response = await this.apiDirectoryDiscoverCompatibleThingIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get hierarchical relationships starting from a root Thing
     * Get Thing hierarchy
     */
    async apiDirectoryDiscoverHierarchyThingIdGetRaw(requestParameters: ApiDirectoryDiscoverHierarchyThingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoveryThingHierarchy>> {
        if (requestParameters['thingId'] == null) {
            throw new runtime.RequiredError(
                'thingId',
                'Required parameter "thingId" was null or undefined when calling apiDirectoryDiscoverHierarchyThingIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['maxDepth'] != null) {
            queryParameters['maxDepth'] = requestParameters['maxDepth'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/directory/discover/hierarchy/{thingId}`.replace(`{${"thingId"}}`, encodeURIComponent(String(requestParameters['thingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoveryThingHierarchyFromJSON(jsonValue));
    }

    /**
     * Get hierarchical relationships starting from a root Thing
     * Get Thing hierarchy
     */
    async apiDirectoryDiscoverHierarchyThingIdGet(requestParameters: ApiDirectoryDiscoverHierarchyThingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoveryThingHierarchy> {
        const response = await this.apiDirectoryDiscoverHierarchyThingIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find all Things that support a specific protocol
     * Discover Things by protocol
     */
    async apiDirectoryDiscoverProtocolProtocolGetRaw(requestParameters: ApiDirectoryDiscoverProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WotThingDescription>>> {
        if (requestParameters['protocol'] == null) {
            throw new runtime.RequiredError(
                'protocol',
                'Required parameter "protocol" was null or undefined when calling apiDirectoryDiscoverProtocolProtocolGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/directory/discover/protocol/{protocol}`.replace(`{${"protocol"}}`, encodeURIComponent(String(requestParameters['protocol']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WotThingDescriptionFromJSON));
    }

    /**
     * Find all Things that support a specific protocol
     * Discover Things by protocol
     */
    async apiDirectoryDiscoverProtocolProtocolGet(requestParameters: ApiDirectoryDiscoverProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WotThingDescription>> {
        const response = await this.apiDirectoryDiscoverProtocolProtocolGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the relationship between two Things
     * Remove Thing relationship
     */
    async apiDirectoryRelationshipsParentIdChildIdDeleteRaw(requestParameters: ApiDirectoryRelationshipsParentIdChildIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling apiDirectoryRelationshipsParentIdChildIdDelete().'
            );
        }

        if (requestParameters['childId'] == null) {
            throw new runtime.RequiredError(
                'childId',
                'Required parameter "childId" was null or undefined when calling apiDirectoryRelationshipsParentIdChildIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/directory/relationships/{parentId}/{childId}`.replace(`{${"parentId"}}`, encodeURIComponent(String(requestParameters['parentId']))).replace(`{${"childId"}}`, encodeURIComponent(String(requestParameters['childId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the relationship between two Things
     * Remove Thing relationship
     */
    async apiDirectoryRelationshipsParentIdChildIdDelete(requestParameters: ApiDirectoryRelationshipsParentIdChildIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDirectoryRelationshipsParentIdChildIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create a relationship between two Things
     * Add Thing relationship
     */
    async apiDirectoryRelationshipsPostRaw(requestParameters: ApiDirectoryRelationshipsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['relationship'] == null) {
            throw new runtime.RequiredError(
                'relationship',
                'Required parameter "relationship" was null or undefined when calling apiDirectoryRelationshipsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/directory/relationships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['relationship'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a relationship between two Things
     * Add Thing relationship
     */
    async apiDirectoryRelationshipsPost(requestParameters: ApiDirectoryRelationshipsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDirectoryRelationshipsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Find Things matching specific capability requirements
     * Search Things by capabilities
     */
    async apiDirectorySearchCapabilitiesPostRaw(requestParameters: ApiDirectorySearchCapabilitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WotThingDescription>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling apiDirectorySearchCapabilitiesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/directory/search/capabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscoveryCapabilityQueryToJSON(requestParameters['query']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WotThingDescriptionFromJSON));
    }

    /**
     * Find Things matching specific capability requirements
     * Search Things by capabilities
     */
    async apiDirectorySearchCapabilitiesPost(requestParameters: ApiDirectorySearchCapabilitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WotThingDescription>> {
        const response = await this.apiDirectorySearchCapabilitiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for Things using various filters and criteria
     * Search for Things
     */
    async apiDirectorySearchPostRaw(requestParameters: ApiDirectorySearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DiscoverySearchResult>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling apiDirectorySearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/directory/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscoverySearchQueryToJSON(requestParameters['query']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DiscoverySearchResultFromJSON));
    }

    /**
     * Search for Things using various filters and criteria
     * Search for Things
     */
    async apiDirectorySearchPost(requestParameters: ApiDirectorySearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DiscoverySearchResult>> {
        const response = await this.apiDirectorySearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find Things with specific semantic annotations
     * Search Things by semantic type
     */
    async apiDirectorySearchSemanticGetRaw(requestParameters: ApiDirectorySearchSemanticGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WotThingDescription>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling apiDirectorySearchSemanticGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/directory/search/semantic`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WotThingDescriptionFromJSON));
    }

    /**
     * Find Things with specific semantic annotations
     * Search Things by semantic type
     */
    async apiDirectorySearchSemanticGet(requestParameters: ApiDirectorySearchSemanticGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WotThingDescription>> {
        const response = await this.apiDirectorySearchSemanticGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Full-text search across Thing Descriptions
     * Search Things by text
     */
    async apiDirectorySearchTextGetRaw(requestParameters: ApiDirectorySearchTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DiscoverySearchResult>>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling apiDirectorySearchTextGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/directory/search/text`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DiscoverySearchResultFromJSON));
    }

    /**
     * Full-text search across Thing Descriptions
     * Search Things by text
     */
    async apiDirectorySearchTextGet(requestParameters: ApiDirectorySearchTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DiscoverySearchResult>> {
        const response = await this.apiDirectorySearchTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
