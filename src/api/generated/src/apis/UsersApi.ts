/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesChangePasswordRequest,
  TypesCreateUserRequest,
  TypesErrorResponse,
  TypesUpdateUserRequest,
  TypesUserListResponse,
  TypesUserResponse,
} from '../models/index';
import {
    TypesChangePasswordRequestFromJSON,
    TypesChangePasswordRequestToJSON,
    TypesCreateUserRequestFromJSON,
    TypesCreateUserRequestToJSON,
    TypesErrorResponseFromJSON,
    TypesErrorResponseToJSON,
    TypesUpdateUserRequestFromJSON,
    TypesUpdateUserRequestToJSON,
    TypesUserListResponseFromJSON,
    TypesUserListResponseToJSON,
    TypesUserResponseFromJSON,
    TypesUserResponseToJSON,
} from '../models/index';

export interface UsersGetRequest {
    page?: number;
    limit?: number;
}

export interface UsersIdDeleteRequest {
    id: string;
}

export interface UsersIdGetRequest {
    id: string;
}

export interface UsersIdPasswordPutRequest {
    id: string;
    password: TypesChangePasswordRequest;
}

export interface UsersIdPutRequest {
    id: string;
    user: TypesUpdateUserRequest;
}

export interface UsersPostRequest {
    user: TypesCreateUserRequest;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * Retrieve all registered user accounts (admin only)
     * @summary List all users
     * @param {number} [page] Page number (default: 1)
     * @param {number} [limit] Items per page (default: 10, max: 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersGetRaw(requestParameters: UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserListResponse>>;

    /**
     * Retrieve all registered user accounts (admin only)
     * List all users
     */
    usersGet(requestParameters: UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserListResponse>;

    /**
     * Delete a user account (admin only)
     * @summary Delete user
     * @param {string} id Username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersIdDeleteRaw(requestParameters: UsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a user account (admin only)
     * Delete user
     */
    usersIdDelete(requestParameters: UsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve a specific user account by username
     * @summary Get user by ID
     * @param {string} id Username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersIdGetRaw(requestParameters: UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserResponse>>;

    /**
     * Retrieve a specific user account by username
     * Get user by ID
     */
    usersIdGet(requestParameters: UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserResponse>;

    /**
     * Change a user\'s password
     * @summary Change user password
     * @param {string} id Username
     * @param {TypesChangePasswordRequest} password Password change request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersIdPasswordPutRaw(requestParameters: UsersIdPasswordPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Change a user\'s password
     * Change user password
     */
    usersIdPasswordPut(requestParameters: UsersIdPasswordPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Update user account details and roles (admin only)
     * @summary Update user
     * @param {string} id Username
     * @param {TypesUpdateUserRequest} user Updated user details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersIdPutRaw(requestParameters: UsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserResponse>>;

    /**
     * Update user account details and roles (admin only)
     * Update user
     */
    usersIdPut(requestParameters: UsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserResponse>;

    /**
     * Create a new user account with specified roles (admin only)
     * @summary Create new user
     * @param {TypesCreateUserRequest} user User details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersPostRaw(requestParameters: UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserResponse>>;

    /**
     * Create a new user account with specified roles (admin only)
     * Create new user
     */
    usersPost(requestParameters: UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserResponse>;

}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {

    /**
     * Retrieve all registered user accounts (admin only)
     * List all users
     */
    async usersGetRaw(requestParameters: UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesUserListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all registered user accounts (admin only)
     * List all users
     */
    async usersGet(requestParameters: UsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserListResponse> {
        const response = await this.usersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a user account (admin only)
     * Delete user
     */
    async usersIdDeleteRaw(requestParameters: UsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling usersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a user account (admin only)
     * Delete user
     */
    async usersIdDelete(requestParameters: UsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a specific user account by username
     * Get user by ID
     */
    async usersIdGetRaw(requestParameters: UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling usersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesUserResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific user account by username
     * Get user by ID
     */
    async usersIdGet(requestParameters: UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserResponse> {
        const response = await this.usersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change a user\'s password
     * Change user password
     */
    async usersIdPasswordPutRaw(requestParameters: UsersIdPasswordPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling usersIdPasswordPut().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling usersIdPasswordPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{id}/password`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TypesChangePasswordRequestToJSON(requestParameters['password']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change a user\'s password
     * Change user password
     */
    async usersIdPasswordPut(requestParameters: UsersIdPasswordPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersIdPasswordPutRaw(requestParameters, initOverrides);
    }

    /**
     * Update user account details and roles (admin only)
     * Update user
     */
    async usersIdPutRaw(requestParameters: UsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling usersIdPut().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling usersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateUserRequestToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesUserResponseFromJSON(jsonValue));
    }

    /**
     * Update user account details and roles (admin only)
     * Update user
     */
    async usersIdPut(requestParameters: UsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserResponse> {
        const response = await this.usersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new user account with specified roles (admin only)
     * Create new user
     */
    async usersPostRaw(requestParameters: UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesUserResponse>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling usersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateUserRequestToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesUserResponseFromJSON(jsonValue));
    }

    /**
     * Create a new user account with specified roles (admin only)
     * Create new user
     */
    async usersPost(requestParameters: UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesUserResponse> {
        const response = await this.usersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
