/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TypesProviderUser
 */
export interface TypesProviderUser {
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TypesProviderUser
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof TypesProviderUser
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof TypesProviderUser
     */
    fullName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypesProviderUser
     */
    groups?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TypesProviderUser
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TypesProviderUser
     */
    username?: string;
}

/**
 * Check if a given object implements the TypesProviderUser interface.
 */
export function instanceOfTypesProviderUser(value: object): value is TypesProviderUser {
    return true;
}

export function TypesProviderUserFromJSON(json: any): TypesProviderUser {
    return TypesProviderUserFromJSONTyped(json, false);
}

export function TypesProviderUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypesProviderUser {
    if (json == null) {
        return json;
    }
    return {
        
        'attributes': json['attributes'] == null ? undefined : json['attributes'],
        'email': json['email'] == null ? undefined : json['email'],
        'fullName': json['full_name'] == null ? undefined : json['full_name'],
        'groups': json['groups'] == null ? undefined : json['groups'],
        'id': json['id'] == null ? undefined : json['id'],
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function TypesProviderUserToJSON(json: any): TypesProviderUser {
    return TypesProviderUserToJSONTyped(json, false);
}

export function TypesProviderUserToJSONTyped(value?: TypesProviderUser | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attributes': value['attributes'],
        'email': value['email'],
        'full_name': value['fullName'],
        'groups': value['groups'],
        'id': value['id'],
        'username': value['username'],
    };
}

