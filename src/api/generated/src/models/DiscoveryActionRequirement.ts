/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DiscoveryActionRequirement
 */
export interface DiscoveryActionRequirement {
    /**
     * 
     * @type {string}
     * @memberof DiscoveryActionRequirement
     */
    inputType?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof DiscoveryActionRequirement
     */
    metadata?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof DiscoveryActionRequirement
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DiscoveryActionRequirement
     */
    outputType?: string;
}

/**
 * Check if a given object implements the DiscoveryActionRequirement interface.
 */
export function instanceOfDiscoveryActionRequirement(value: object): value is DiscoveryActionRequirement {
    return true;
}

export function DiscoveryActionRequirementFromJSON(json: any): DiscoveryActionRequirement {
    return DiscoveryActionRequirementFromJSONTyped(json, false);
}

export function DiscoveryActionRequirementFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiscoveryActionRequirement {
    if (json == null) {
        return json;
    }
    return {
        
        'inputType': json['inputType'] == null ? undefined : json['inputType'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'] == null ? undefined : json['name'],
        'outputType': json['outputType'] == null ? undefined : json['outputType'],
    };
}

export function DiscoveryActionRequirementToJSON(json: any): DiscoveryActionRequirement {
    return DiscoveryActionRequirementToJSONTyped(json, false);
}

export function DiscoveryActionRequirementToJSONTyped(value?: DiscoveryActionRequirement | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'inputType': value['inputType'],
        'metadata': value['metadata'],
        'name': value['name'],
        'outputType': value['outputType'],
    };
}

