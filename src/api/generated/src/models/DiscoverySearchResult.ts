/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WotThingDescription } from './WotThingDescription';
import {
    WotThingDescriptionFromJSON,
    WotThingDescriptionFromJSONTyped,
    WotThingDescriptionToJSON,
    WotThingDescriptionToJSONTyped,
} from './WotThingDescription';

/**
 * 
 * @export
 * @interface DiscoverySearchResult
 */
export interface DiscoverySearchResult {
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof DiscoverySearchResult
     */
    highlights?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof DiscoverySearchResult
     */
    metadata?: { [key: string]: object; };
    /**
     * 
     * @type {number}
     * @memberof DiscoverySearchResult
     */
    relevance?: number;
    /**
     * 
     * @type {WotThingDescription}
     * @memberof DiscoverySearchResult
     */
    thing?: WotThingDescription;
}

/**
 * Check if a given object implements the DiscoverySearchResult interface.
 */
export function instanceOfDiscoverySearchResult(value: object): value is DiscoverySearchResult {
    return true;
}

export function DiscoverySearchResultFromJSON(json: any): DiscoverySearchResult {
    return DiscoverySearchResultFromJSONTyped(json, false);
}

export function DiscoverySearchResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiscoverySearchResult {
    if (json == null) {
        return json;
    }
    return {
        
        'highlights': json['highlights'] == null ? undefined : json['highlights'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'relevance': json['relevance'] == null ? undefined : json['relevance'],
        'thing': json['thing'] == null ? undefined : WotThingDescriptionFromJSON(json['thing']),
    };
}

export function DiscoverySearchResultToJSON(json: any): DiscoverySearchResult {
    return DiscoverySearchResultToJSONTyped(json, false);
}

export function DiscoverySearchResultToJSONTyped(value?: DiscoverySearchResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'highlights': value['highlights'],
        'metadata': value['metadata'],
        'relevance': value['relevance'],
        'thing': WotThingDescriptionToJSON(value['thing']),
    };
}

