/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TypesUserResponse
 */
export interface TypesUserResponse {
    /**
     * 
     * @type {string}
     * @memberof TypesUserResponse
     */
    createdAt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TypesUserResponse
     */
    disabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TypesUserResponse
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof TypesUserResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TypesUserResponse
     */
    lastLogin?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TypesUserResponse
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof TypesUserResponse
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypesUserResponse
     */
    roles?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TypesUserResponse
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof TypesUserResponse
     */
    username?: string;
}

/**
 * Check if a given object implements the TypesUserResponse interface.
 */
export function instanceOfTypesUserResponse(value: object): value is TypesUserResponse {
    return true;
}

export function TypesUserResponseFromJSON(json: any): TypesUserResponse {
    return TypesUserResponseFromJSONTyped(json, false);
}

export function TypesUserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypesUserResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'disabled': json['disabled'] == null ? undefined : json['disabled'],
        'email': json['email'] == null ? undefined : json['email'],
        'id': json['id'] == null ? undefined : json['id'],
        'lastLogin': json['last_login'] == null ? undefined : json['last_login'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'] == null ? undefined : json['name'],
        'roles': json['roles'] == null ? undefined : json['roles'],
        'updatedAt': json['updated_at'] == null ? undefined : json['updated_at'],
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function TypesUserResponseToJSON(json: any): TypesUserResponse {
    return TypesUserResponseToJSONTyped(json, false);
}

export function TypesUserResponseToJSONTyped(value?: TypesUserResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': value['createdAt'],
        'disabled': value['disabled'],
        'email': value['email'],
        'id': value['id'],
        'last_login': value['lastLogin'],
        'metadata': value['metadata'],
        'name': value['name'],
        'roles': value['roles'],
        'updated_at': value['updatedAt'],
        'username': value['username'],
    };
}

