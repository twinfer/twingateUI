/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WotPropertyAffordance } from './WotPropertyAffordance';
import {
    WotPropertyAffordanceFromJSON,
    WotPropertyAffordanceFromJSONTyped,
    WotPropertyAffordanceToJSON,
    WotPropertyAffordanceToJSONTyped,
} from './WotPropertyAffordance';
import type { WotActionAffordance } from './WotActionAffordance';
import {
    WotActionAffordanceFromJSON,
    WotActionAffordanceFromJSONTyped,
    WotActionAffordanceToJSON,
    WotActionAffordanceToJSONTyped,
} from './WotActionAffordance';
import type { WotLink } from './WotLink';
import {
    WotLinkFromJSON,
    WotLinkFromJSONTyped,
    WotLinkToJSON,
    WotLinkToJSONTyped,
} from './WotLink';
import type { WotEventAffordance } from './WotEventAffordance';
import {
    WotEventAffordanceFromJSON,
    WotEventAffordanceFromJSONTyped,
    WotEventAffordanceToJSON,
    WotEventAffordanceToJSONTyped,
} from './WotEventAffordance';
import type { WotDataSchema } from './WotDataSchema';
import {
    WotDataSchemaFromJSON,
    WotDataSchemaFromJSONTyped,
    WotDataSchemaToJSON,
    WotDataSchemaToJSONTyped,
} from './WotDataSchema';
import type { WotSecurityScheme } from './WotSecurityScheme';
import {
    WotSecuritySchemeFromJSON,
    WotSecuritySchemeFromJSONTyped,
    WotSecuritySchemeToJSON,
    WotSecuritySchemeToJSONTyped,
} from './WotSecurityScheme';
import type { WotVersionInfo } from './WotVersionInfo';
import {
    WotVersionInfoFromJSON,
    WotVersionInfoFromJSONTyped,
    WotVersionInfoToJSON,
    WotVersionInfoToJSONTyped,
} from './WotVersionInfo';

/**
 * Complete W3C WoT Thing Description 1.1 specification compliant structure
 * @export
 * @interface WotThingDescription
 */
export interface WotThingDescription {
    /**
     * 
     * @type {string}
     * @memberof WotThingDescription
     */
    $comment?: string;
    /**
     * 
     * @type {string}
     * @memberof WotThingDescription
     */
    context?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WotThingDescription
     */
    type?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: WotActionAffordance; }}
     * @memberof WotThingDescription
     */
    actions?: { [key: string]: WotActionAffordance; };
    /**
     * 
     * @type {string}
     * @memberof WotThingDescription
     */
    base?: string;
    /**
     * 
     * @type {string}
     * @memberof WotThingDescription
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof WotThingDescription
     */
    description?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof WotThingDescription
     */
    descriptions?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: WotEventAffordance; }}
     * @memberof WotThingDescription
     */
    events?: { [key: string]: WotEventAffordance; };
    /**
     * 
     * @type {Array<object>}
     * @memberof WotThingDescription
     */
    forms?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof WotThingDescription
     */
    id?: string;
    /**
     * 
     * @type {Array<WotLink>}
     * @memberof WotThingDescription
     */
    links?: Array<WotLink>;
    /**
     * 
     * @type {string}
     * @memberof WotThingDescription
     */
    modified?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WotThingDescription
     */
    profile?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: WotPropertyAffordance; }}
     * @memberof WotThingDescription
     */
    properties?: { [key: string]: WotPropertyAffordance; };
    /**
     * 
     * @type {{ [key: string]: WotDataSchema; }}
     * @memberof WotThingDescription
     */
    schemaDefinitions?: { [key: string]: WotDataSchema; };
    /**
     * 
     * @type {Array<string>}
     * @memberof WotThingDescription
     */
    security?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: WotSecurityScheme; }}
     * @memberof WotThingDescription
     */
    securityDefinitions?: { [key: string]: WotSecurityScheme; };
    /**
     * 
     * @type {string}
     * @memberof WotThingDescription
     */
    support?: string;
    /**
     * 
     * @type {string}
     * @memberof WotThingDescription
     */
    title?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof WotThingDescription
     */
    titles?: { [key: string]: string; };
    /**
     * 
     * @type {Array<string>}
     * @memberof WotThingDescription
     */
    uris?: Array<string>;
    /**
     * 
     * @type {WotVersionInfo}
     * @memberof WotThingDescription
     */
    version?: WotVersionInfo;
}

/**
 * Check if a given object implements the WotThingDescription interface.
 */
export function instanceOfWotThingDescription(value: object): value is WotThingDescription {
    return true;
}

export function WotThingDescriptionFromJSON(json: any): WotThingDescription {
    return WotThingDescriptionFromJSONTyped(json, false);
}

export function WotThingDescriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): WotThingDescription {
    if (json == null) {
        return json;
    }
    return {
        
        '$comment': json['$comment'] == null ? undefined : json['$comment'],
        'context': json['@context'] == null ? undefined : json['@context'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'actions': json['actions'] == null ? undefined : (mapValues(json['actions'], WotActionAffordanceFromJSON)),
        'base': json['base'] == null ? undefined : json['base'],
        'created': json['created'] == null ? undefined : json['created'],
        'description': json['description'] == null ? undefined : json['description'],
        'descriptions': json['descriptions'] == null ? undefined : json['descriptions'],
        'events': json['events'] == null ? undefined : (mapValues(json['events'], WotEventAffordanceFromJSON)),
        'forms': json['forms'] == null ? undefined : json['forms'],
        'id': json['id'] == null ? undefined : json['id'],
        'links': json['links'] == null ? undefined : ((json['links'] as Array<any>).map(WotLinkFromJSON)),
        'modified': json['modified'] == null ? undefined : json['modified'],
        'profile': json['profile'] == null ? undefined : json['profile'],
        'properties': json['properties'] == null ? undefined : (mapValues(json['properties'], WotPropertyAffordanceFromJSON)),
        'schemaDefinitions': json['schemaDefinitions'] == null ? undefined : (mapValues(json['schemaDefinitions'], WotDataSchemaFromJSON)),
        'security': json['security'] == null ? undefined : json['security'],
        'securityDefinitions': json['securityDefinitions'] == null ? undefined : (mapValues(json['securityDefinitions'], WotSecuritySchemeFromJSON)),
        'support': json['support'] == null ? undefined : json['support'],
        'title': json['title'] == null ? undefined : json['title'],
        'titles': json['titles'] == null ? undefined : json['titles'],
        'uris': json['uris'] == null ? undefined : json['uris'],
        'version': json['version'] == null ? undefined : WotVersionInfoFromJSON(json['version']),
    };
}

export function WotThingDescriptionToJSON(json: any): WotThingDescription {
    return WotThingDescriptionToJSONTyped(json, false);
}

export function WotThingDescriptionToJSONTyped(value?: WotThingDescription | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '$comment': value['$comment'],
        '@context': value['context'],
        '@type': value['type'],
        'actions': value['actions'] == null ? undefined : (mapValues(value['actions'], WotActionAffordanceToJSON)),
        'base': value['base'],
        'created': value['created'],
        'description': value['description'],
        'descriptions': value['descriptions'],
        'events': value['events'] == null ? undefined : (mapValues(value['events'], WotEventAffordanceToJSON)),
        'forms': value['forms'],
        'id': value['id'],
        'links': value['links'] == null ? undefined : ((value['links'] as Array<any>).map(WotLinkToJSON)),
        'modified': value['modified'],
        'profile': value['profile'],
        'properties': value['properties'] == null ? undefined : (mapValues(value['properties'], WotPropertyAffordanceToJSON)),
        'schemaDefinitions': value['schemaDefinitions'] == null ? undefined : (mapValues(value['schemaDefinitions'], WotDataSchemaToJSON)),
        'security': value['security'],
        'securityDefinitions': value['securityDefinitions'] == null ? undefined : (mapValues(value['securityDefinitions'], WotSecuritySchemeToJSON)),
        'support': value['support'],
        'title': value['title'],
        'titles': value['titles'],
        'uris': value['uris'],
        'version': WotVersionInfoToJSON(value['version']),
    };
}

