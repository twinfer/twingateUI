/* tslint:disable */
/* eslint-disable */
/**
 * TwinCore Gateway API
 * TwinCore Gateway is a Web of Things (WoT) gateway that manages IoT devices through W3C Thing Descriptions. It dynamically generates data processing pipelines using Benthos and exposes HTTP APIs for device interaction.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@twinfer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WotDataSchema } from './WotDataSchema';
import {
    WotDataSchemaFromJSON,
    WotDataSchemaFromJSONTyped,
    WotDataSchemaToJSON,
    WotDataSchemaToJSONTyped,
} from './WotDataSchema';

/**
 * 
 * @export
 * @interface WotPropertyAffordance
 */
export interface WotPropertyAffordance {
    /**
     * 
     * @type {string}
     * @memberof WotPropertyAffordance
     */
    $comment?: string;
    /**
     * Added for W3C WoT TD 1.1 semantic annotations
     * @type {Array<string>}
     * @memberof WotPropertyAffordance
     */
    type?: Array<string>;
    /**
     * bool or *DataSchema
     * @type {object}
     * @memberof WotPropertyAffordance
     */
    additionalProperties?: object;
    /**
     * 
     * @type {Array<WotDataSchema>}
     * @memberof WotPropertyAffordance
     */
    allOf?: Array<WotDataSchema>;
    /**
     * 
     * @type {Array<WotDataSchema>}
     * @memberof WotPropertyAffordance
     */
    anyOf?: Array<WotDataSchema>;
    /**
     * 
     * @type {object}
     * @memberof WotPropertyAffordance
     */
    _const?: object;
    /**
     * 
     * @type {string}
     * @memberof WotPropertyAffordance
     */
    contentEncoding?: string;
    /**
     * 
     * @type {string}
     * @memberof WotPropertyAffordance
     */
    contentMediaType?: string;
    /**
     * 
     * @type {object}
     * @memberof WotPropertyAffordance
     */
    _default?: object;
    /**
     * 
     * @type {string}
     * @memberof WotPropertyAffordance
     */
    description?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof WotPropertyAffordance
     */
    descriptions?: { [key: string]: string; };
    /**
     * 
     * @type {Array<object>}
     * @memberof WotPropertyAffordance
     */
    _enum?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof WotPropertyAffordance
     */
    exclusiveMaximum?: number;
    /**
     * 
     * @type {number}
     * @memberof WotPropertyAffordance
     */
    exclusiveMinimum?: number;
    /**
     * e.g., "date-time", "uri", "email"
     * @type {string}
     * @memberof WotPropertyAffordance
     */
    format?: string;
    /**
     * Must contain at least one form
     * @type {Array<object>}
     * @memberof WotPropertyAffordance
     */
    forms?: Array<object>;
    /**
     * Array-specific
     * @type {object}
     * @memberof WotPropertyAffordance
     */
    items?: object;
    /**
     * 
     * @type {number}
     * @memberof WotPropertyAffordance
     */
    maxItems?: number;
    /**
     * 
     * @type {number}
     * @memberof WotPropertyAffordance
     */
    maxLength?: number;
    /**
     * 
     * @type {number}
     * @memberof WotPropertyAffordance
     */
    maximum?: number;
    /**
     * 
     * @type {number}
     * @memberof WotPropertyAffordance
     */
    minItems?: number;
    /**
     * 
     * @type {number}
     * @memberof WotPropertyAffordance
     */
    minLength?: number;
    /**
     * Number/Integer-specific
     * @type {number}
     * @memberof WotPropertyAffordance
     */
    minimum?: number;
    /**
     * 
     * @type {number}
     * @memberof WotPropertyAffordance
     */
    multipleOf?: number;
    /**
     * 
     * @type {WotDataSchema}
     * @memberof WotPropertyAffordance
     */
    not?: WotDataSchema;
    /**
     * Default false, relevant for PropertyAffordance
     * @type {boolean}
     * @memberof WotPropertyAffordance
     */
    observable?: boolean;
    /**
     * Logical keywords
     * @type {Array<WotDataSchema>}
     * @memberof WotPropertyAffordance
     */
    oneOf?: Array<WotDataSchema>;
    /**
     * String-specific
     * @type {string}
     * @memberof WotPropertyAffordance
     */
    pattern?: string;
    /**
     * Object-specific
     * @type {{ [key: string]: WotDataSchema; }}
     * @memberof WotPropertyAffordance
     */
    properties?: { [key: string]: WotDataSchema; };
    /**
     * 
     * @type {WotDataSchema}
     * @memberof WotPropertyAffordance
     */
    propertyNames?: WotDataSchema;
    /**
     * WoT specific (often found within PropertyAffordance, but part of DataSchema concept)
     * @type {boolean}
     * @memberof WotPropertyAffordance
     */
    readOnly?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof WotPropertyAffordance
     */
    required?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof WotPropertyAffordance
     */
    title?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof WotPropertyAffordance
     */
    titles?: { [key: string]: string; };
    /**
     * Type and format
     * @type {string}
     * @memberof WotPropertyAffordance
     */
    type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WotPropertyAffordance
     */
    uniqueItems?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WotPropertyAffordance
     */
    unit?: string;
    /**
     * 
     * @type {{ [key: string]: WotDataSchema; }}
     * @memberof WotPropertyAffordance
     */
    uriVariables?: { [key: string]: WotDataSchema; };
    /**
     * Default false
     * @type {boolean}
     * @memberof WotPropertyAffordance
     */
    writeOnly?: boolean;
}

/**
 * Check if a given object implements the WotPropertyAffordance interface.
 */
export function instanceOfWotPropertyAffordance(value: object): value is WotPropertyAffordance {
    return true;
}

export function WotPropertyAffordanceFromJSON(json: any): WotPropertyAffordance {
    return WotPropertyAffordanceFromJSONTyped(json, false);
}

export function WotPropertyAffordanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): WotPropertyAffordance {
    if (json == null) {
        return json;
    }
    return {
        
        '$comment': json['$comment'] == null ? undefined : json['$comment'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'additionalProperties': json['additionalProperties'] == null ? undefined : json['additionalProperties'],
        'allOf': json['allOf'] == null ? undefined : ((json['allOf'] as Array<any>).map(WotDataSchemaFromJSON)),
        'anyOf': json['anyOf'] == null ? undefined : ((json['anyOf'] as Array<any>).map(WotDataSchemaFromJSON)),
        '_const': json['const'] == null ? undefined : json['const'],
        'contentEncoding': json['contentEncoding'] == null ? undefined : json['contentEncoding'],
        'contentMediaType': json['contentMediaType'] == null ? undefined : json['contentMediaType'],
        '_default': json['default'] == null ? undefined : json['default'],
        'description': json['description'] == null ? undefined : json['description'],
        'descriptions': json['descriptions'] == null ? undefined : json['descriptions'],
        '_enum': json['enum'] == null ? undefined : json['enum'],
        'exclusiveMaximum': json['exclusiveMaximum'] == null ? undefined : json['exclusiveMaximum'],
        'exclusiveMinimum': json['exclusiveMinimum'] == null ? undefined : json['exclusiveMinimum'],
        'format': json['format'] == null ? undefined : json['format'],
        'forms': json['forms'] == null ? undefined : json['forms'],
        'items': json['items'] == null ? undefined : json['items'],
        'maxItems': json['maxItems'] == null ? undefined : json['maxItems'],
        'maxLength': json['maxLength'] == null ? undefined : json['maxLength'],
        'maximum': json['maximum'] == null ? undefined : json['maximum'],
        'minItems': json['minItems'] == null ? undefined : json['minItems'],
        'minLength': json['minLength'] == null ? undefined : json['minLength'],
        'minimum': json['minimum'] == null ? undefined : json['minimum'],
        'multipleOf': json['multipleOf'] == null ? undefined : json['multipleOf'],
        'not': json['not'] == null ? undefined : WotDataSchemaFromJSON(json['not']),
        'observable': json['observable'] == null ? undefined : json['observable'],
        'oneOf': json['oneOf'] == null ? undefined : ((json['oneOf'] as Array<any>).map(WotDataSchemaFromJSON)),
        'pattern': json['pattern'] == null ? undefined : json['pattern'],
        'properties': json['properties'] == null ? undefined : (mapValues(json['properties'], WotDataSchemaFromJSON)),
        'propertyNames': json['propertyNames'] == null ? undefined : WotDataSchemaFromJSON(json['propertyNames']),
        'readOnly': json['readOnly'] == null ? undefined : json['readOnly'],
        'required': json['required'] == null ? undefined : json['required'],
        'title': json['title'] == null ? undefined : json['title'],
        'titles': json['titles'] == null ? undefined : json['titles'],
        'type': json['type'] == null ? undefined : json['type'],
        'uniqueItems': json['uniqueItems'] == null ? undefined : json['uniqueItems'],
        'unit': json['unit'] == null ? undefined : json['unit'],
        'uriVariables': json['uriVariables'] == null ? undefined : (mapValues(json['uriVariables'], WotDataSchemaFromJSON)),
        'writeOnly': json['writeOnly'] == null ? undefined : json['writeOnly'],
    };
}

export function WotPropertyAffordanceToJSON(json: any): WotPropertyAffordance {
    return WotPropertyAffordanceToJSONTyped(json, false);
}

export function WotPropertyAffordanceToJSONTyped(value?: WotPropertyAffordance | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '$comment': value['$comment'],
        '@type': value['type'],
        'additionalProperties': value['additionalProperties'],
        'allOf': value['allOf'] == null ? undefined : ((value['allOf'] as Array<any>).map(WotDataSchemaToJSON)),
        'anyOf': value['anyOf'] == null ? undefined : ((value['anyOf'] as Array<any>).map(WotDataSchemaToJSON)),
        'const': value['_const'],
        'contentEncoding': value['contentEncoding'],
        'contentMediaType': value['contentMediaType'],
        'default': value['_default'],
        'description': value['description'],
        'descriptions': value['descriptions'],
        'enum': value['_enum'],
        'exclusiveMaximum': value['exclusiveMaximum'],
        'exclusiveMinimum': value['exclusiveMinimum'],
        'format': value['format'],
        'forms': value['forms'],
        'items': value['items'],
        'maxItems': value['maxItems'],
        'maxLength': value['maxLength'],
        'maximum': value['maximum'],
        'minItems': value['minItems'],
        'minLength': value['minLength'],
        'minimum': value['minimum'],
        'multipleOf': value['multipleOf'],
        'not': WotDataSchemaToJSON(value['not']),
        'observable': value['observable'],
        'oneOf': value['oneOf'] == null ? undefined : ((value['oneOf'] as Array<any>).map(WotDataSchemaToJSON)),
        'pattern': value['pattern'],
        'properties': value['properties'] == null ? undefined : (mapValues(value['properties'], WotDataSchemaToJSON)),
        'propertyNames': WotDataSchemaToJSON(value['propertyNames']),
        'readOnly': value['readOnly'],
        'required': value['required'],
        'title': value['title'],
        'titles': value['titles'],
        'type': value['type'],
        'uniqueItems': value['uniqueItems'],
        'unit': value['unit'],
        'uriVariables': value['uriVariables'] == null ? undefined : (mapValues(value['uriVariables'], WotDataSchemaToJSON)),
        'writeOnly': value['writeOnly'],
    };
}

