import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useImportThing } from '@/hooks/useDiscovery';
import { Download, CheckCircle, AlertCircle, XCircle, Clock, Globe, Code, Settings, Activity, Zap } from 'lucide-react';
export function ThingPreviewDialog(_a) {
    var thing = _a.thing, open = _a.open, onOpenChange = _a.onOpenChange;
    var importThing = useImportThing();
    var handleImport = function () {
        importThing.mutate(thing);
        onOpenChange(false);
    };
    var getValidationIcon = function (status) {
        switch (status) {
            case 'valid':
                return _jsx(CheckCircle, { className: "h-4 w-4 text-green-500" });
            case 'invalid':
                return _jsx(XCircle, { className: "h-4 w-4 text-red-500" });
            case 'warning':
                return _jsx(AlertCircle, { className: "h-4 w-4 text-yellow-500" });
            case 'pending':
                return _jsx(Clock, { className: "h-4 w-4 text-gray-500" });
        }
    };
    var td = thing.thingDescription;
    var properties = td.properties ? Object.entries(td.properties) : [];
    var actions = td.actions ? Object.entries(td.actions) : [];
    var events = td.events ? Object.entries(td.events) : [];
    return (_jsx(Dialog, { open: open, onOpenChange: onOpenChange, children: _jsxs(DialogContent, { className: "max-w-4xl max-h-[90vh] overflow-hidden", children: [_jsx(DialogHeader, { children: _jsxs("div", { className: "flex items-start justify-between", children: [_jsxs("div", { className: "flex-1 min-w-0", children: [_jsx(DialogTitle, { className: "text-xl", children: thing.title }), thing.description && (_jsx(DialogDescription, { className: "mt-1", children: thing.description })), _jsxs("div", { className: "flex items-center gap-2 mt-2", children: [getValidationIcon(thing.validationStatus), _jsx(Badge, { variant: thing.validationStatus === 'valid' ? 'default' : 'destructive', children: thing.validationStatus }), _jsxs(Badge, { variant: "outline", children: [_jsx(Globe, { className: "h-3 w-3 mr-1" }), thing.discoveryMethod] })] })] }), _jsxs(Button, { onClick: handleImport, disabled: importThing.isPending, children: [_jsx(Download, { className: "h-4 w-4 mr-2" }), "Import Thing"] })] }) }), _jsxs(Tabs, { defaultValue: "overview", className: "flex-1", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-4", children: [_jsx(TabsTrigger, { value: "overview", children: "Overview" }), _jsxs(TabsTrigger, { value: "properties", children: ["Properties (", properties.length, ")"] }), _jsxs(TabsTrigger, { value: "actions", children: ["Actions (", actions.length, ")"] }), _jsx(TabsTrigger, { value: "raw", children: "Raw TD" })] }), _jsxs(ScrollArea, { className: "h-[500px] mt-4", children: [_jsxs(TabsContent, { value: "overview", className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm", children: "Basic Information" }) }), _jsxs(CardContent, { className: "space-y-2 text-sm", children: [_jsxs("div", { children: [_jsx("span", { className: "font-medium", children: "ID:" }), " ", td.id || 'Not specified'] }), _jsxs("div", { children: [_jsx("span", { className: "font-medium", children: "URL:" }), " ", thing.url] }), _jsxs("div", { children: [_jsx("span", { className: "font-medium", children: "Created:" }), " ", td.created || 'Unknown'] }), _jsxs("div", { children: [_jsx("span", { className: "font-medium", children: "Modified:" }), " ", td.modified || 'Unknown'] }), td.version && (_jsxs("div", { children: [_jsx("span", { className: "font-medium", children: "Version:" }), " ", td.version.instance] }))] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm", children: "Capabilities" }) }), _jsxs(CardContent, { className: "space-y-2 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Settings, { className: "h-4 w-4" }), _jsxs("span", { children: [properties.length, " Properties"] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Zap, { className: "h-4 w-4" }), _jsxs("span", { children: [actions.length, " Actions"] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Activity, { className: "h-4 w-4" }), _jsxs("span", { children: [events.length, " Events"] })] })] })] })] }), thing.validationErrors && thing.validationErrors.length > 0 && (_jsxs(Card, { className: "border-red-200", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm text-red-800", children: "Validation Issues" }) }), _jsx(CardContent, { children: _jsx("ul", { className: "space-y-1 text-sm text-red-700", children: thing.validationErrors.map(function (error, idx) { return (_jsxs("li", { children: ["\u2022 ", error] }, idx)); }) }) })] })), td.links && (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm", children: "Links" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-2", children: td.links.map(function (link, idx) { return (_jsxs("div", { className: "text-sm", children: [_jsx(Badge, { variant: "outline", className: "mr-2", children: link.rel }), _jsx("span", { className: "font-mono text-xs", children: link.href })] }, idx)); }) }) })] }))] }), _jsx(TabsContent, { value: "properties", className: "space-y-4", children: properties.length === 0 ? (_jsx(Card, { children: _jsxs(CardContent, { className: "text-center py-8", children: [_jsx(Settings, { className: "h-8 w-8 mx-auto text-muted-foreground mb-2" }), _jsx("p", { className: "text-muted-foreground", children: "No properties defined" })] }) })) : (_jsx("div", { className: "space-y-3", children: properties.map(function (_a) {
                                            var _b, _c;
                                            var key = _a[0], prop = _a[1];
                                            return (_jsxs(Card, { children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardTitle, { className: "text-sm", children: prop.title || key }), prop.description && (_jsx(CardDescription, { className: "text-xs", children: prop.description }))] }), _jsxs(CardContent, { className: "pt-0", children: [_jsxs("div", { className: "flex flex-wrap gap-2 text-xs", children: [_jsxs(Badge, { variant: "outline", children: ["Type: ", prop.type || 'unknown'] }), prop.readOnly && _jsx(Badge, { variant: "secondary", children: "Read Only" }), prop.writeOnly && _jsx(Badge, { variant: "secondary", children: "Write Only" }), prop.observable && _jsx(Badge, { variant: "default", children: "Observable" }), prop.unit && _jsxs(Badge, { variant: "outline", children: ["Unit: ", prop.unit] })] }), (prop.minimum !== undefined || prop.maximum !== undefined) && (_jsxs("div", { className: "mt-2 text-xs text-muted-foreground", children: ["Range: ", (_b = prop.minimum) !== null && _b !== void 0 ? _b : '−∞', " to ", (_c = prop.maximum) !== null && _c !== void 0 ? _c : '+∞'] }))] })] }, key));
                                        }) })) }), _jsx(TabsContent, { value: "actions", className: "space-y-4", children: actions.length === 0 ? (_jsx(Card, { children: _jsxs(CardContent, { className: "text-center py-8", children: [_jsx(Zap, { className: "h-8 w-8 mx-auto text-muted-foreground mb-2" }), _jsx("p", { className: "text-muted-foreground", children: "No actions defined" })] }) })) : (_jsx("div", { className: "space-y-3", children: actions.map(function (_a) {
                                            var key = _a[0], action = _a[1];
                                            return (_jsxs(Card, { children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardTitle, { className: "text-sm", children: action.title || key }), action.description && (_jsx(CardDescription, { className: "text-xs", children: action.description }))] }), _jsx(CardContent, { className: "pt-0", children: _jsxs("div", { className: "space-y-2", children: [action.input && (_jsxs("div", { children: [_jsx("span", { className: "text-xs font-medium", children: "Input:" }), _jsx(Badge, { variant: "outline", className: "ml-2 text-xs", children: action.input.type || 'object' })] })), action.output && (_jsxs("div", { children: [_jsx("span", { className: "text-xs font-medium", children: "Output:" }), _jsx(Badge, { variant: "outline", className: "ml-2 text-xs", children: action.output.type || 'object' })] }))] }) })] }, key));
                                        }) })) }), _jsx(TabsContent, { value: "raw", className: "space-y-4", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "text-sm flex items-center gap-2", children: [_jsx(Code, { className: "h-4 w-4" }), "Raw Thing Description (JSON-LD)"] }) }), _jsx(CardContent, { children: _jsx("pre", { className: "text-xs bg-muted p-4 rounded overflow-auto max-h-96", children: JSON.stringify(thing.thingDescription, null, 2) }) })] }) })] })] })] }) }));
}
